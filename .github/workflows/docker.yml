name: Build Docker Image

on:
  push:
    branches:    
      - develop
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=-1

      - name: Login to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ github.token }}
          
      - name: Read .version file
        id: version
        run: echo "::set-output name=version::$(cat .version)"
        
      - name: Set versions
        run: |
         sed -i 's/"0.0.0"/"${{ steps.version.outputs.version }}"/g' frontend/package.json
         cat frontend/package.json | grep "${{ steps.version.outputs.version }}"
         sed -i 's/"0.0.0"/"${{ steps.version.outputs.version }}"/g' backend/package.json
         cat backend/package.json | grep "${{ steps.version.outputs.version }}"
         sed -i 's/"0.0.0"/"${{ steps.version.outputs.version }}"/g' docs/package.json
         cat docs/package.json | grep "${{ steps.version.outputs.version }}"
        
      - name: Set current date as env variable
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S')"
        
      - name: set envs
        run: |
         export "BUILD_VERSION=${{ steps.version.outputs.version }}"
         export "BUILD_COMMIT=${{ github.sha }}"
         export "BUILD_DATE=${{ steps.date.outputs.date }}"
         
      - uses: actions/setup-node@v3
        with:
          node-version: 18
        
#      - name: cache-frontend
#        id: cache-frontend
#        uses: actions/cache@v3
#        with:
#          path: frontend/dist
#          key: ${{ steps.version.outputs.version }}-frontend-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-${{ github.sha }}
#          restore-keys: |
#            ${{ steps.version.outputs.version }}-frontend-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-
          
      - name: Prepair frontend
#        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
         export NODE_OPTIONS=--openssl-legacy-provider
         node --version
         yarn --version
         npm install --global yarn
         cd frontend
         yarn install
         yarn build

#      - name: cache-backend
#        id: cache-backend
#        uses: actions/cache@v3
#        with:
#          path: backend/node_modules
#          key: ${{ steps.version.outputs.version }}-backend-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-${{ github.sha }}
#          restore-keys: |
#            ${{ steps.version.outputs.version }}-backend-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-

      - name: Prepair backend
#        if: steps.cache-backend.outputs.cache-hit != 'true'
        run: |
         export NODE_OPTIONS=--openssl-legacy-provider
         export DB_SQLITE_FILE=/data/database.sqlite
         export NODE_ENV=dev
         node --version
         yarn --version
         npm install --global yarn
         mv global backend
         cd backend
         yarn install && yarn eslint index.js
         timeout 10 node --abort_on_uncaught_exception --max_old_space_size=250 index.js || if [ "$?" -eq "124" ]; then exit 0; fi

#      - name: Cache Docker layers
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.buildx-cache
#          key: buildx-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-${{ github.sha }}
#          restore-keys: |
#            buildx-${{ secrets.CACHE_ID }}-${{ github.ref_name }}-

      - name: Build
        uses: docker/build-push-action@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64 #,linux/amd64/v2,linux/amd64/v3 #linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          push: ${{ github.ref == 'refs/heads/develop' }}
          tags: | 
           ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }}
           ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }}
          build-args: |
           "BUILD_VERSION=${{ steps.version.outputs.version }}+"
           "BUILD_COMMIT=${{ github.sha }}"
           "BUILD_DATE=${{ steps.date.outputs.date }}"
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
                
      - name: show version
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: | 
         docker run --rm --entrypoint /usr/sbin/nginx ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }} -V
         docker run --rm --entrypoint /usr/sbin/nginx ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }} -V

      - name: Set PR-Number (PR)
        if: ${{ github.event_name == 'pull_request' }}
        id: pr
        run: echo "::set-output name=pr::$(echo pr-${{ github.ref_name }} | sed "s/refs\/pull\/://g" | sed "s/\/merge//g")"

      - name: Build (PR)
        uses: docker/build-push-action@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64 #,linux/amd64/v2,linux/amd64/v3 #linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          push: ${{ github.event_name == 'pull_request' }}
          tags: ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.pr.outputs.pr }}
          build-args: |
           "BUILD_VERSION=${{ steps.version.outputs.version }}+"
           "BUILD_COMMIT=${{ github.sha }}"
           "BUILD_DATE=${{ steps.date.outputs.date }}"
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache
                
      - name: show version (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: docker run --rm --entrypoint /usr/sbin/nginx ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.pr.outputs.pr }} -V
          
      - name: add comment (PR)
        uses: mshick/add-pr-comment@v1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: "The Docker Image can now be found here: `ghcr.io/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.pr.outputs.pr }}`"
          repo-token: ${{ github.token }}
